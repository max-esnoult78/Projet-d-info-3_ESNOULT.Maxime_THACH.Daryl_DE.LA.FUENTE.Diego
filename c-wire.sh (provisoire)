#!/bin/bash

# --- Variables globales ---
PROGRAMME="./c-wire"                 # Nom de l'exécutable C
FICHIER_CSV="stations.csv"           # Fichier CSV par défaut
FICHIER_LOG="log.txt"                # Fichier de logs
FICHIER_SORTIE="resultats.csv"       # Fichier pour exporter les résultats

# --- Fonctions utilitaires ---

# Affiche un message de séparation
function separation() {
    echo "--------------------------------------------------------"
}

# Vérifie si le programme C est compilé et présent
function verifierProgramme() {
    if [ ! -f "$PROGRAMME" ]; then
        echo "Erreur : Le programme C ($PROGRAMME) n'est pas compilé ou introuvable."
        exit 1
    fi
}

# Vérifie si le fichier CSV existe
function verifierFichierCSV() {
    if [ ! -f "$FICHIER_CSV" ]; then
        echo "Erreur : Le fichier CSV ($FICHIER_CSV) est introuvable."
        exit 1
    fi
}

# Écrit un message dans le fichier de logs
function log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') : $1" >> "$FICHIER_LOG"
}

# Affiche un message d'erreur et le log dans le fichier
function erreur() {
    echo "Erreur : $1"
    log "Erreur : $1"
}

# Affiche le menu interactif
function afficherMenu() {
    separation
    echo "Menu interactif - Gestion des stations"
    separation
    echo "1. Charger un fichier CSV"
    echo "2. Afficher les stations (tableau formaté)"
    echo "3. Rechercher une station par identifiant"
    echo "4. Exporter les résultats"
    echo "5. Quitter"
    separation
    echo -n "Entrez votre choix : "
}

# --- Fonctions principales ---

# Fonction pour charger un fichier CSV
function chargerFichier() {
    echo -n "Entrez le nom du fichier CSV (par défaut : stations.csv) : "
    read fichier
    if [ -z "$fichier" ]; then
        fichier=$FICHIER_CSV
    fi

    if [ ! -f "$fichier" ]; then
        erreur "Le fichier $fichier est introuvable."
        return
    fi

    FICHIER_CSV="$fichier"
    log "Fichier CSV chargé : $FICHIER_CSV"
    echo "Le fichier $FICHIER_CSV a été chargé avec succès."
}

# Fonction pour afficher les stations
function afficherStations() {
    verifierProgramme
    verifierFichierCSV
    echo "Affichage des stations depuis $FICHIER_CSV :"
    $PROGRAMME 2
    if [ $? -ne 0 ]; then
        erreur "Échec lors de l'affichage des stations."
    else
        log "Affichage des stations effectué avec succès."
    fi
}

# Fonction pour rechercher une station par identifiant
function rechercherStation() {
    verifierProgramme
    verifierFichierCSV
    echo -n "Entrez l'identifiant de la station à rechercher : "
    read identifiant

    if [ -z "$identifiant" ]; then
        erreur "L'identifiant ne peut pas être vide."
        return
    fi

    $PROGRAMME 3 "$identifiant"
    if [ $? -ne 0 ]; then
        erreur "Échec lors de la recherche de la station avec l'identifiant $identifiant."
    else
        log "Recherche effectuée pour l'identifiant $identifiant."
    fi
}

# Fonction pour exporter les résultats dans un fichier
function exporterResultats() {
    verifierProgramme
    verifierFichierCSV
    echo -n "Entrez le nom du fichier d'export (par défaut : resultats.csv) : "
    read fichier
    if [ -z "$fichier" ]; then
        fichier=$FICHIER_SORTIE
    fi

    $PROGRAMME 4 "$fichier"
    if [ $? -ne 0 ]; then
        erreur "Échec lors de l'export des résultats dans le fichier $fichier."
    else
        log "Résultats exportés dans le fichier $fichier."
        echo "Les résultats ont été exportés dans $fichier avec succès."
    fi
}

# --- Boucle interactive ---

verifierProgramme # Vérifier que le programme C est bien compilé
log "Début de l'exécution du script interactif."

while true; do
    afficherMenu
    read choix

    case "$choix" in
        1)
            chargerFichier
            ;;
        2)
            afficherStations
            ;;
        3)
            rechercherStation
            ;;
        4)
            exporterResultats
            ;;
        5)
            echo "Merci d'avoir utilisé le programme. À bientôt !"
            log "Fin de l'exécution du script interactif."
            exit 0
            ;;
        *)
            echo "Option invalide. Veuillez réessayer."
            ;;
    esac
done
